CREATE TABLE staff (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50),
    position VARCHAR(50),
    salary DECIMAL(10, 2),
    department VARCHAR(50)
);



INSERT INTO staff (name, position, salary, department) VALUES
('Alice', 'Manager', 75000, 'Sales'),
('Bob', 'Analyst', 55000, 'Finance'),
('Charlie', 'Engineer', 60000, 'IT'),
('Diana', 'HR Specialist', 50000, 'Human Resources');

SELECT * FROM staff;
SELECT name, salary FROM staff;


SELECT * FROM staff WHERE department = 'IT';
SELECT * FROM staff WHERE salary > 55000;



Updating Data
Update an employee's salary:

sql
Copy code
UPDATE staff SET salary = 80000 WHERE name = 'Alice';
Update the department of an employee:

sql
Copy code
UPDATE staff SET department = 'Operations' WHERE id = 3;
6. Deleting Data
Delete a specific employee record:

sql
Copy code
DELETE FROM staff WHERE name = 'Diana';
Delete all employees in a department:

sql
Copy code
DELETE FROM staff WHERE department = 'Finance';
7. Sorting Data (Using ORDER BY)
Order by salary in ascending order:

sql
Copy code
SELECT * FROM staff ORDER BY salary ASC;
Order by name in descending order:

sql
Copy code
SELECT * FROM staff ORDER BY name DESC;
8. Aggregate Functions
Find the average salary of all employees:

sql
Copy code
SELECT AVG(salary) AS average_salary FROM staff;
Count the number of employees in each department:

sql
Copy code
SELECT department, COUNT(*) AS employee_count FROM staff GROUP BY department;


9. Joining with Another Table
If you have another table, like departments, you can join it with staff based on a shared column.

sql
Copy code
SELECT staff.name, staff.position, departments.department_name
FROM staff
JOIN departments ON staff.department = departments.department_id;
10. Dropping the Table
To delete the staff table entirely (be careful with this as it will remove all data):

sql
Copy code
DROP TABLE staff;






Define the departments Table
The departments table will contain department details, with a unique department_id for each department:

sql
Copy code
CREATE TABLE departments (
    department_id INT PRIMARY KEY AUTO_INCREMENT,
    department_name VARCHAR(50),
    location VARCHAR(50)
);
Sample Data for departments Table
Let's insert some data into the departments table:

sql
Copy code
INSERT INTO departments (department_name, location) VALUES
('Sales', 'New York'),
('Finance', 'London'),
('IT', 'San Francisco'),
('Human Resources', 'Chicago');
Updated staff Table Structure
To join effectively, we’ll assume the staff table references departments using a department_id rather than the department name.

Modify the staff Table to include department_id as a foreign key:

sql
Copy code
ALTER TABLE staff
ADD COLUMN department_id INT,
ADD FOREIGN KEY (department_id) REFERENCES departments(department_id);
Update staff Data to link with departments by department_id:

sql
Copy code
UPDATE staff SET department_id = 1 WHERE department = 'Sales';
UPDATE staff SET department_id = 2 WHERE department = 'Finance';
UPDATE staff SET department_id = 3 WHERE department = 'IT';
UPDATE staff SET department_id = 4 WHERE department = 'Human Resources';
Example Joins with staff and departments
Inner Join – To retrieve staff information along with their department names and locations:

sql
Copy code
SELECT staff.name, staff.position, staff.salary, departments.department_name, departments.location
FROM staff
INNER JOIN departments ON staff.department_id = departments.department_id;
Result: This query will list each staff member’s name, position, salary, and their department's name and location.
Left Join – To include all staff members, even if they don’t belong to a department:

sql
Copy code
SELECT staff.name, staff.position, staff.salary, departments.department_name, departments.location
FROM staff
LEFT JOIN departments ON staff.department_id = departments.department_id;
Result: This query returns all staff members, showing department information if available; if a staff member doesn’t have a matching department, those columns will contain NULL.
Right Join – To include all departments, even if there are no staff members assigned to them:

sql
Copy code
SELECT staff.name, staff.position, staff.salary, departments.department_name, departments.location
FROM staff
RIGHT JOIN departments ON staff.department_id = departments.department_id;
Result: This query lists all departments, including ones without assigned staff members, where staff-related columns will show NULL for unassigned departments.
Sample Output
If you run the INNER JOIN, you might see output like this:

name	position	salary	department_name	location
Alice	Manager	75000	Sales	New York
Bob	Analyst	55000	Finance	London
Charlie	Engineer	60000	IT	San Francisco
Diana	HR Specialist	50000	Human Resources	Chicago
These join examples should help demonstrate how to link and query data across related tables. Let me know if you'd like additional examples!

























Explanation
Node Class:

Represents each node in the doubly linked list. Each Node has val, next, prev, and child pointers.
Flatten Method:

This method initializes the flattening process by creating a dummy node and calling the recursive helper function flattenDFS.
FlattenDFS Helper Method:

A recursive method that processes each node to flatten any multi-level child pointers.
Main Method:

Tests the flatten method by creating a sample multi-level linked list and printing the flattened result.
You can compile and run this in the Array.Cyclic package structure to verify the output.





This code defines a DoublyLinked class inside the Array.Cyclic package. The class includes:

An inner static Node class to define each node in the doubly linked list.
A flatten method to initiate the flattening of the multi-level doubly linked list.
A recursive helper method flattenDFS that performs the actual flattening of nodes.
A main method to demonstrate and test the functionality of the flatten method.
1. Node Class
The Node class is defined as an inner static class within DoublyLinked and represents each node in the doubly linked list. Each node has:

int val: Holds the value of the node.
Node next: Points to the next node in the list.
Node prev: Points to the previous node in the list.
Node child: Points to a child node, representing the head of a sublist (another doubly linked list).
2. flatten Method
The flatten method is the main function that begins the flattening process of the multi-level linked list. Here’s how it works:

Input: The head node of a multi-level doubly linked list.
Edge Case: Checks if head is null, in which case it returns null.
Dummy Node: Creates a temporary dummy node with value 0 to simplify linking logic at the beginning. This dummy node’s next points to the actual head, and head.prev points back to dummy.
Calling flattenDFS: Calls the helper function flattenDFS with the dummy node as prev and head as curr to recursively flatten the list.
Detach Dummy Node: After flattening, dummy.next.prev is set to null to remove the reference to dummy. The method then returns dummy.next, which is the actual head of the flattened list.
3. flattenDFS Helper Method
This is the recursive helper function that flattens the multi-level doubly linked list using depth-first traversal. Here’s the breakdown:

Parameters:
Node prev: The previous node in the flattened list.
Node curr: The current node being processed.
Base Case: If curr is null, it returns prev, indicating the end of a level.
Connecting Nodes:
Sets curr.prev = prev and prev.next = curr to link curr to prev.
Saving next Node: Temporarily saves curr.next in tempNext to remember the next node at the current level.
Recursive Flattening of Child Nodes:
If curr has a child, it recursively calls flattenDFS(curr, curr.child) to f





